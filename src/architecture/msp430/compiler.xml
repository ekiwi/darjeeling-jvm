<project name="compiler">

	<dirname property="compilerpath" file="${ant.file.compiler}"/>
	
	<import file="${compilerpath}/../../taskdefs.xml"/>

    <condition property="compiler.standard"
               value="-std=gnu99"
               else="-mstrict-align">
        <os family="windows"/>
    </condition>
    
    <condition property="compiler.debug.format"
               value="-gdwarf-2"
               else="">
        <os family="windows"/>
    </condition>
    
	<macrodef name="platform-compile">
		<attribute name="objectfiles"/>
		<element name="compile-elements"/>
		<sequential>
			<mkdir dir="@{objectfiles}"/>
			<cc
				name="gcc"
				objdir="@{objectfiles}"
				>
				<compiler classname="net.sf.antcontrib.cpptasks.gcc.cross.GccCCompiler">
					<compilerparam value="msp430" name="target"/>
					<compilerarg value="-Wall"/>
					<compilerarg value="-mmcu=${mcu}"/>
                    <compilerarg value="-DPLATFORM=${platform}"/>
                    <compilerarg value="-DARCHITECTURE=${architecture}"/>
                    <compilerarg value="-DCONFIGURATION=${configuration}"/>
					<compilerarg value="-Os"/>
					<compilerarg value="-finline-limit-1"/>
                    <compilerarg value="${compiler.standard}"/>
                    <compilerarg value="${compiler.debug.format}"/>
				</compiler>

				<compile-elements/>
			</cc>
		</sequential>
	</macrodef>
	
	<!--
	This macro links a bunch of object files and libraries into an output file (usually .elf).
	-->
	<macrodef name="platform-link">
		<attribute name="outputfile"/>
		<element name="link-elements"/>
		<sequential>
			<cc
				name="gcc"
				outfile="@{outputfile}"
				>
				<linker classname="net.sf.antcontrib.cpptasks.gcc.cross.GccLinker">
					<linkerparam value="msp430" name="target"/>
					<linkerarg value="-mmcu=${mcu}"/>
                    <linkerarg value="-umain"/>
				</linker>
				
				<link-elements/>
			</cc>
		</sequential>
	</macrodef>

	<!--
	The objcopy macro is used to turn data that needs to be included into the final binary into an elf file. 
	On some configurations the infusion files that need to be loaded at init are packaged into an archive and then
	linked statically into the final executable.
	-->
    <condition property="objcopy.renamesection"
               value="--rename-section .data=.fartext,alloc,load,readonly,data,contents"
               else="">
        <equals arg1="${platform}" arg2="ocapi" casesensitive="false" />
    </condition>
	
	<macrodef name="platform-objcopy">
		<attribute name="inputfile"/>
		<attribute name="outputfile"/>
		<sequential>
            <exec executable="msp430-objcopy">
                <arg line="-I binary -O elf32-msp430 ${objcopy.renamesection} @{inputfile} @{outputfile}"/>
            </exec>
		</sequential>
	</macrodef>

</project>
