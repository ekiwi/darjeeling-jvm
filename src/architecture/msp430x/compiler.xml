<project name="compiler">

	<dirname property="compilerpath" file="${ant.file.compiler}"/>
	
	<import file="${compilerpath}/../../taskdefs.xml"/>

	<macrodef name="platform-compile">
		<attribute name="objectfiles"/>
		<element name="compile-elements"/>
		<sequential>
			<mkdir dir="@{objectfiles}"/>
			<cc
				name="gcc"
				objdir="@{objectfiles}"
				>
				<compiler classname="net.sf.antcontrib.cpptasks.gcc.cross.GccCCompiler">
					<compilerparam value="msp430" name="target"/>
					<compilerarg value="-Wall"/>
					<compilerarg value="-g"/>
					<compilerarg value="-mmcu=${mcu}"/>
					<compilerarg value="-mdisable-hwmul"/>
					<!--<compilerarg value="-fstack-check"/>-->
                                        <compilerarg value="-Os"/>
					<compilerarg value="-finline-limit-1"/>
                                        <compilerarg value="-mdata-64k"/>
                                        <!--<compilerarg value="-ffunction-sections"/>-->

                                        <!--<compilerarg value="-mcode-64k"/>-->
                                        <compilerarg value="-strict-align"/>
                                        <!--compilerarg value="-Wcast-align"/-->
				</compiler>

				<compile-elements/>
			</cc>
		</sequential>
	</macrodef>
	
	<!--
	This macro links a bunch of object files and libraries into an output file (usually .elf).
	-->
	<macrodef name="platform-link">
		<attribute name="outputfile"/>
		<element name="link-elements"/>
		<sequential>
			<cc
				name="gcc"
				outfile="@{outputfile}"
				>
				<linker classname="net.sf.antcontrib.cpptasks.gcc.cross.GccLinker">
					<linkerparam value="msp430" name="target"/>
					<linkerarg value="-mmcu=${mcu}"/>
                                        <linkerarg value="-Wl,-Map,darjeeling-msp430.map"/>
                                        <linkerarg value="-Wl,-Map,darjeeling-msp430.map"/>
                                        <!-- Workaround for undefined reference
                                        to main problem. It might be an order
                                        problem (no undefined main when symbol
                                        main is encountered). Setting an
                                        undefine before linking in our .a file
                                        forces the linker to actually link in
                                        main et al.) -->
                                        <linkerarg value="-umain"/>

				</linker>
				
				<link-elements/>
			</cc>
		</sequential>
	</macrodef>

	<!--
	The objcopy macro is used to turn data that needs to be included into the final binary into an elf file. 
	On some configurations the infusion files that need to be loaded at init are packaged into an archive and then
	linked statically into the final executable.
	-->
	<macrodef name="platform-objcopy">
		<attribute name="inputfile"/>
		<attribute name="outputfile"/>
		<sequential>
			<carray
                                src="@{inputfile}"
                                dest="temp.c"
                                arrayname="di_archive"
                                keywords="const __attribute((section(&quot;.fartext&quot;)))"
                        />
			<cc
				name="gcc"
				objdir="."
				>
                                <fileset includes="temp.c" dir="."/>
				<compiler classname="net.sf.antcontrib.cpptasks.gcc.cross.GccCCompiler">
					<compilerparam value="msp430" name="target"/>
					<compilerarg value="-Wall"/>
					<compilerarg value="-mmcu=${mcu}"/>
					<compilerarg value="-finline-limit-1"/>
				</compiler>

			</cc>
                        <exec executable="mv">
                                <arg line="temp.o @{outputfile}"/>
                        </exec>

			<!--<exec executable="msp430-objcopy">
				<arg line="-I binary -O elf32-msp430 @{inputfile} @{outputfile}"/>
			</exec>-->
		</sequential>
	</macrodef>

</project>
