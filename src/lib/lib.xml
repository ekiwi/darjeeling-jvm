<project name="lib" default="all">

	<dirname property="libpath" file="${ant.file.lib}"/>
	<dirname property="targetlibpath" file="${ant.file}"/>
	
	<!-- Default configuration is 'native' -->
	<property name="configuration" value="native"/>
	
	<!-- Import configuration -->
	<import file="${libpath}/../config/${configuration}/build.xml"/>

	<!-- Import taskdefs (infuser, cpptasks) -->
	<import file="${libpath}/../taskdefs.xml"/>
	
	<!-- Import the toolchain for the given architecture-->
	<import file="${libpath}/../architecture/${architecture}/compiler.xml"/>

	<!-- Build output directories. The C code is compiled and output to a seperate directory for each configuration -->
	<property name="build" value="${targetlibpath}/build/"/>
	<property name="configbuild" value="${targetlibpath}/build/${configuration}/"/>
	
	<!-- Java code -->
	<property name="javasrc" value="${targetlibpath}/java"/>
	<property name="classes" value="${build}/class"/>
	<property name="jarfile" value="${build}/${name}.jar"/>
	<property name="bootclasspath" value="${libpath}/base/build/base.jar"/>
	
	<!-- Infuser arguments -->
	<property name="infusionfile" value="${build}/${name}.di"/>
	<property name="infusionheader" value="${build}/${name}.dih"/>
	<property name="infusionhfile" value="${build}/jlib_${name}.h"/>
	<property name="infusioncfile" value="${build}/jlib_${name}.c"/>

	<!-- C code and libs -->
	<property name="csrc" value="${targetlibpath}/c"/>
	<property name="objectfiles" value="${configbuild}/o"/>
	<property name="libraryfile" value="${configbuild}/${name}.a"/>
	
	<!-- Documentation -->
	<property name="doc" value="${targetlibpath}/doc"/>

	<!-- List of infuser header files. Generated by converting a list of library names (ie 'base, darjeeling') into a 
	fileset pointing to the corresponding .dih files. -->
	<pathconvert property="infuser-headers" pathsep=" ">
		<filelist dir="/" files="${lib-depends}"/>
		<regexpmapper from="\${file.separator}(.*)" to="\1/build/\1.dih"/>
	</pathconvert>
	<fileset id="infuser-include-headers" includes="${infuser-headers}" dir="${libpath}"/>
	
	<!-- List of jar files to include. Generated by converting a list of library names (ie 'base, darjeeling') into a 
	list of jar files with absolute paths -->
	<pathconvert property="javac-classpath" pathsep=":">
		<filelist dir="/" files="${lib-depends}"/>
		<regexpmapper from="\${file.separator}(.*)" to="/\1/build/\1.jar"/>
	</pathconvert>

	<!-- List of library include directories for gcc. Generated by converting a list of library names (ie 'base, darjeeling') 
	into a list of jar files with absolute paths -->
	<!-- 
		TODO - these hardcoded library names are the artifact of tinyOS, please do not remove
		before solving the problem for tinyOS
	-->
	<pathconvert property="cc-include-paths" pathsep=" ">
		<filelist dir="/" files="base darjeeling darjeeling2 radio ${lib-depends}"/>
		<regexpmapper from="\${file.separator}(.*)" to="/\1/build/"/>
        <map from="" to="${libpath}"/>
	</pathconvert>
	
	<!-- Meta-target -->
	<target name="all" depends="compile-java, package, infuse, compile-c, ar"/>

	<!-- compile the java sources -->
	<target name="compile-java">
		<mkdir dir="${classes}"/>
		<javac
			srcdir="${javasrc}"
			destdir="${classes}"
			source="1.5"
			debug="true"
			encoding="iso-8859-1"		
			bootclasspath="${bootclasspath}"
		>
			<classpath>
				<fileset includes="javac-classpath" dir="${libpath}"/>
			</classpath>
		</javac>
	</target>

	<!-- compile the java sources -->
	<target name="compile-c" depends="infuse">
		<platform-compile objectfiles="${objectfiles}">
			<compile-elements>
				<defineset refid="platform-defines"/>
				
				<!-- include directories -->
				<includepath>
					<pathelement path="${libpath}/../architecture/${architecture}/c"/>
					<pathelement path="${libpath}/../platform/${platform}/c"/>
					<pathelement path="${libpath}/../config/${configuration}/c"/>
					<pathelement path="${libpath}/../vm/c"/>
					<pathelement path="${build}"/>
					<pathelement path="build"/>
					<path refid="platform-includes"/>
					<path><filelist files="${cc-include-paths}" dir="/"/></path>
				</includepath>
		
				<!-- input files -->
				<fileset dir="${csrc}">
					<include name="common/**/*.c"/>
					<include name="${platform}/**/*.c"/>
				</fileset>
				<fileset dir="${build}" includes="*.c"/>
				
			</compile-elements>
		</platform-compile>
	</target>
	
	<target name="ar">
		
	    <pathconvert property="objectfilestring" pathsep=" ">
		<path>
		    <fileset dir="${objectfiles}" includes="**/*.o"/>
		</path>
	    </pathconvert>
	    	
	    <exec executable="ar">
	    	<arg line="rcs ${build}/${configuration}/${name}.a ${objectfilestring}"/>
	    </exec>
	
	</target>

	<!-- package the code into a single .jar file -->
	<target name="package" depends="compile-java"> 
		<mkdir dir="${build}"/>
		<jar destfile="${jarfile}"> 
			<fileset dir="${classes}"><include name="**/*.class"/></fileset>
		</jar>
	</target>

	<!-- infuse the java code -->
	<target name="infuse" depends="compile-java"> 
		<infuser
			name="${name}"
			infusionfile="${infusionfile}"
			headerfile="${infusionheader}"
			hfile="${infusionhfile}"
			cfile="${infusioncfile}"
		>
			<!-- Include the classes -->
			<fileset dir="${classes}" ><include name="**/*.class"/></fileset>
			
			<!-- include .dih files -->
			<fileset refid="infuser-include-headers"/>
		</infuser>
	</target>

	<!-- generate javadoc documentation -->
	<target name="doc">
		<mkdir dir="${doc}"/>
		<javadoc
			sourcepath="${src}"
			destdir="${doc}"
			classpath="${bcelpath}"
		>
		</javadoc>
	</target>

	<!-- clean -->
	<target name="clean">
		<delete dir="${build}"/>
		<delete dir="${doc}"/>
	</target>

</project>
