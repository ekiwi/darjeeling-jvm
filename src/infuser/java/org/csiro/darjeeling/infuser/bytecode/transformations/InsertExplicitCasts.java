/*
 * InsertExplicitCasts.java
 * 
 * Copyright (c) 2008-2010 CSIRO, Delft University of Technology.
 * 
 * This file is part of Darjeeling.
 * 
 * Darjeeling is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Darjeeling is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with Darjeeling.  If not, see <http://www.gnu.org/licenses/>.
 */
 
package org.csiro.darjeeling.infuser.bytecode.transformations;

import org.csiro.darjeeling.infuser.bytecode.CodeBlock;
import org.csiro.darjeeling.infuser.bytecode.CodeBlockTransformation;
import org.csiro.darjeeling.infuser.bytecode.Instruction;
import org.csiro.darjeeling.infuser.bytecode.InstructionHandle;
import org.csiro.darjeeling.infuser.bytecode.InstructionList;
import org.csiro.darjeeling.infuser.bytecode.Opcode;
import org.csiro.darjeeling.infuser.bytecode.analysis.GeneratedValue;
import org.csiro.darjeeling.infuser.bytecode.analysis.GeneratedValueSet;
import org.csiro.darjeeling.infuser.bytecode.instructions.ExplicitCastInstruction;
import org.csiro.darjeeling.infuser.structure.BaseType;
import org.csiro.darjeeling.infuser.structure.TypeClass;

public class InsertExplicitCasts extends CodeBlockTransformation
{

	public InsertExplicitCasts(CodeBlock codeBlock)
	{
		super(codeBlock);
	}
	
	private Instruction createCastInstruction(BaseType fromType, BaseType toType)
	{
		if ((fromType.getTypeClass()==TypeClass.Short)&&(toType.getTypeClass()==TypeClass.Int)) return new ExplicitCastInstruction(Opcode.S2I);
		if ((fromType.getTypeClass()==TypeClass.Short)&&(toType.getTypeClass()==TypeClass.Long)) return new ExplicitCastInstruction(Opcode.S2L);
		if ((fromType.getTypeClass()==TypeClass.Int)&&(toType.getTypeClass()==TypeClass.Short)) return new ExplicitCastInstruction(Opcode.I2S);
		if ((fromType.getTypeClass()==TypeClass.Int)&&(toType.getTypeClass()==TypeClass.Long)) return new ExplicitCastInstruction(Opcode.I2L);
		if ((fromType.getTypeClass()==TypeClass.Long)&&(toType.getTypeClass()==TypeClass.Int)) return new ExplicitCastInstruction(Opcode.L2I);
		if ((fromType.getTypeClass()==TypeClass.Long)&&(toType.getTypeClass()==TypeClass.Short)) return new ExplicitCastInstruction(Opcode.L2S);
		throw new IllegalStateException(String.format("Cannot cast from %s to %s", fromType, toType));
	}

	@Override
	protected void transformInternal()
	{
		
		InstructionList instructions = codeBlock.getInstructions();
		
		for (int i=instructions.size()-1; i>=0; i--)
		{
			InstructionHandle handle = instructions.get(i);
			handle.getInstruction().setOptimisationHints(handle);
		}
		
		for (int i=0; i<instructions.size(); i++)
		{
			InstructionHandle handle = instructions.get(i);
			BaseType hint, type;
			GeneratedValueSet element;
			
			int nrOutputs = handle.getInstruction().getNrOutputValues();

			for (int j=0; j<nrOutputs; j++)
			{
				BaseType outputType = handle.getOutputType(j);

				if (outputType.getTypeClass()==TypeClass.Short || outputType.getTypeClass()==TypeClass.Int || outputType.getTypeClass()==TypeClass.Long)
				{
					// get the optimization hint
					element = handle.getPostState().getStack().peek(j);
					hint = element.getOptimizationHint();
					
					// if the hint is a 'don't care', the output of this handle is being discarded
					// (probably by a pop/pop2 instruction) - we don't need to cast it
					if (hint!=BaseType.DontCare)
					{
					
						// check if the output is of the correct width
						type = element.getType();
						
						// make sure the optimization hint is not null - this can only
						// happen when there's a bug in the type inference code
						if (hint==null) throw new IllegalStateException(String.format(
								"Optimization hint is null on an integer output at pc=%d. This is a bug, please file a bug report.",
								handle.getPc()
								));

						if (type.getTypeClass()!=hint.getTypeClass())
							if (j==0) {
								InstructionHandle castHandle = new InstructionHandle(createCastInstruction(type, hint));
								instructions.insertAfter(handle, castHandle);

								// TODO bit of a hack, this.
								// Adjust the value so that it is now being generated by the newly inserted cast instruction,
								// first output slot 
								for (GeneratedValue value : element)
								{
									value.setHandle(castHandle);
									value.setIndex(0);
								}
								i++;
							} else if (j==1)
							{
								throw new IllegalStateException("Cannot insert cast for value one slot down");
							} else
								throw new IllegalStateException("Cannot insert a cast for a value that is not on top of the stack");
								
						
					}
				}
			}
			
		}
		
		// prune S2Ss
		for (int i=0; i<instructions.size(); i++)
		{
			InstructionHandle handle = instructions.get(i);
			if (handle.getInstruction().getOpcode()==Opcode.S2S)
			{
				instructions.remove(handle);
				i--;
			}
		}
		
	}

}
